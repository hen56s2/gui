local httpService = game:GetService("HttpService")

local InterfaceManager = {} do
    InterfaceManager.Folder = "FluentSettings"
    InterfaceManager.Settings = {
        Theme = "PurplePink",
        Acrylic = true,
        Transparency = true,
        MenuKeybind = "LeftControl"
    }

    -- Define available themes
    InterfaceManager.ThemeList = {
        "PurplePink",
        "Dark",
        "Light"
    }

    -- Define theme colors
    InterfaceManager.ThemeColors = {
        PurplePink = {
            BackgroundColor3 = Color3.fromRGB(40, 30, 50),
            SecondaryColor3 = Color3.fromRGB(255, 182, 193),
            AccentColor3 = Color3.fromRGB(219, 112, 147),
            TextColor3 = Color3.fromRGB(255, 255, 255),
            PrimaryColor3 = Color3.fromRGB(147, 112, 219)
        },
        Dark = {
            BackgroundColor3 = Color3.fromRGB(30, 30, 30),
            SecondaryColor3 = Color3.fromRGB(45, 45, 45),
            AccentColor3 = Color3.fromRGB(60, 60, 60),
            TextColor3 = Color3.fromRGB(255, 255, 255),
            PrimaryColor3 = Color3.fromRGB(80, 80, 80)
        },
        Light = {
            BackgroundColor3 = Color3.fromRGB(240, 240, 240),
            SecondaryColor3 = Color3.fromRGB(225, 225, 225),
            AccentColor3 = Color3.fromRGB(210, 210, 210),
            TextColor3 = Color3.fromRGB(50, 50, 50),
            PrimaryColor3 = Color3.fromRGB(195, 195, 195)
        }
    }

    function InterfaceManager:SetFolder(folder)
        self.Folder = folder
        self:BuildFolderTree()
    end

    function InterfaceManager:SetLibrary(library)
        self.Library = library
        -- Add themes to library
        self.Library.Themes = self.ThemeColors
        self.Library.ThemeList = self.ThemeList
    end

    function InterfaceManager:BuildFolderTree()
        local paths = {}

        local parts = self.Folder:split("/")
        for idx = 1, #parts do
            paths[#paths + 1] = table.concat(parts, "/", 1, idx)
        end

        table.insert(paths, self.Folder)
        table.insert(paths, self.Folder .. "/settings")

        for i = 1, #paths do
            local str = paths[i]
            if not isfolder(str) then
                makefolder(str)
            end
        end
    end

    function InterfaceManager:SaveSettings()
        writefile(self.Folder .. "/options.json", httpService:JSONEncode(self.Settings))
    end

    function InterfaceManager:LoadSettings()
        local path = self.Folder .. "/options.json"
        if isfile(path) then
            local data = readfile(path)
            local success, decoded = pcall(httpService.JSONDecode, httpService, data)

            if success and type(decoded) == "table" then
                for i, v in next, decoded do
                    self.Settings[i] = v
                end
            end
        end
    end

    function InterfaceManager:BuildInterfaceSection(tab)
        assert(self.Library, "Must set InterfaceManager.Library")
        local Library = self.Library
        local Settings = self.Settings

        self:LoadSettings()

        local section = tab:AddSection({
            Name = "Interface",
            Type = "Section"
        })

        local InterfaceTheme = section:AddDropdown({
            Name = "Theme",
            Flag = "InterfaceTheme",
            List = self.ThemeList,
            Default = Settings.Theme,
            Callback = function(Value)
                if self.ThemeColors[Value] then
                    Library:SetTheme(self.ThemeColors[Value])
                    Settings.Theme = Value
                    self:SaveSettings()
                end
            end
        })

        if Library.UseAcrylic then
            section:AddToggle({
                Name = "Acrylic",
                Flag = "AcrylicToggle",
                Default = Settings.Acrylic,
                Callback = function(Value)
                    Library:ToggleAcrylic(Value)
                    Settings.Acrylic = Value
                    self:SaveSettings()
                end
            })
        end

        section:AddToggle({
            Name = "Transparency",
            Flag = "TransparentToggle",
            Default = Settings.Transparency,
            Callback = function(Value)
                Library:ToggleTransparency(Value)
                Settings.Transparency = Value
                self:SaveSettings()
            end
        })

        local MenuKeybind = section:AddKeybind({
            Name = "Menu Key",
            Flag = "MenuKeybind",
            Default = Settings.MenuKeybind,
            Callback = function(Value)
                Settings.MenuKeybind = Value
                self:SaveSettings()
            end
        })

        Library.MinimizeKeybind = MenuKeybind
    end

    -- Initialize with default theme
    function InterfaceManager:Initialize()
        if self.Library then
            self:LoadSettings()
            if self.ThemeColors[self.Settings.Theme] then
                self.Library:SetTheme(self.ThemeColors[self.Settings.Theme])
            end
        end
    end
end

return InterfaceManager
